local luarpc = require("luarpc")

describe("luarpc module", function()
  describe("should work", function()
    -- Encode
    it("should encode chars", function()
      assert.same("a", luarpc.encode("char", "a"))
    end)

    it("should encode strings", function()
      assert.same("abc", luarpc.encode("string", "abc"))
    end)

    it("should encode new lines", function()
      assert.same("\\n", luarpc.encode("string", "\n"))
      assert.same("\\n\\n", luarpc.encode("string", "\n\n"))
    end)

    it("should encode slashes", function()
      assert.same("\\\\", luarpc.encode("string", "\\"))

      assert.same("\\\\n", luarpc.encode("string", "\\n"))
      assert.same("n\\\\", luarpc.encode("string", "n\\"))
      assert.same("n\\\\n", luarpc.encode("string", "n\\n"))

      assert.same("\\\\n\\\\n", luarpc.encode("string", "\\n\\n"))
      assert.same("n\\\\n\\\\", luarpc.encode("string", "n\\n\\"))
      assert.same("n\\\\n\\\\n", luarpc.encode("string", "n\\n\\n"))
    end)

    it("should encode doubles", function()
      assert.same("3.1415", luarpc.encode("double", 3.1415))
      assert.same("1", luarpc.encode("double", 1))
      assert.same("123", luarpc.encode("double", 123))
    end)

    -- Decode
    it("should decode chars", function()
      assert.same("a", luarpc.decode("char", "a"))
    end)

    it("should decode strings", function()
      assert.same("abc", luarpc.decode("string", "abc"))
    end)

    it("should decode new lines", function()
      assert.same("\n", luarpc.decode("string", "\\n"))
      assert.same("\n\n", luarpc.decode("string", "\\n\\n"))
    end)

    it("should decode slashes", function()
      assert.same("\\", luarpc.decode("string", "\\\\"))

      assert.same("\\n", luarpc.decode("string", "\\\\n"))
      assert.same("n\\", luarpc.decode("string", "n\\\\"))
      assert.same("n\\n", luarpc.decode("string", "n\\\\n"))

      assert.same("\\n\\n", luarpc.decode("string", "\\\\n\\\\n"))
      assert.same("n\\n\\", luarpc.decode("string", "n\\\\n\\\\"))
      assert.same("n\\n\\n", luarpc.decode("string", "n\\\\n\\\\n"))
    end)

    it("should decode doubles", function()
      assert.same(3.1415, luarpc.decode("double", "3.1415"))
      assert.same(1, luarpc.decode("double", "1"))
      assert.same(123, luarpc.decode("double", "123"))
    end)

    -- back to original
    it("should decode to original value", function()
      local x = "okok"
      assert.same(x, luarpc.decode("string", luarpc.encode("string", x)))

      assert.same("a", luarpc.decode("char", luarpc.encode("char", "a")))
      assert.same("a", luarpc.decode("string", luarpc.encode("string", "a")))
      assert.same("abc", luarpc.decode("string", luarpc.encode("string", "abc")))
      assert.same("\\", luarpc.decode("string", luarpc.encode("string", "\\")))
      assert.same("\\\\", luarpc.decode("string", luarpc.encode("string", "\\\\")))
      assert.same("a\\b", luarpc.decode("string", luarpc.encode("string", "a\\b")))
      assert.same("a\n", luarpc.decode("string", luarpc.encode("string", "a\n")))
      assert.same("a\\n", luarpc.decode("string", luarpc.encode("string", "a\\n")))
      assert.same("\na", luarpc.decode("string", luarpc.encode("string", "\na")))
      assert.same("\\na", luarpc.decode("string", luarpc.encode("string", "\\na")))
      assert.same("\n", luarpc.decode("string", luarpc.encode("string", "\n")))
      assert.same("\\n", luarpc.decode("string", luarpc.encode("string", "\\n")))
      assert.same("\\\n", luarpc.decode("string", luarpc.encode("string", "\\\n")))
      assert.same("\\\\n", luarpc.decode("string", luarpc.encode("string", "\\\\n")))
      assert.same("\n\n", luarpc.decode("string", luarpc.encode("string", "\n\n")))
      assert.same("\n\n\n", luarpc.decode("string", luarpc.encode("string", "\n\n\n")))
      assert.same("\\n\\", luarpc.decode("string", luarpc.encode("string", "\\n\\")))
      assert.same("\\n\\n\\", luarpc.decode("string", luarpc.encode("string", "\\n\\n\\")))
      assert.same("\\\n\\\n\\", luarpc.decode("string", luarpc.encode("string", "\\\n\\\n\\")))
      assert.same("\\\n\\\\n\\", luarpc.decode("string", luarpc.encode("string", "\\\n\\\\n\\")))
      assert.same("\\\\n\\\\n\\", luarpc.decode("string", luarpc.encode("string", "\\\\n\\\\n\\")))
      assert.same("\\\\\n\\\\n\\", luarpc.decode("string", luarpc.encode("string", "\\\\\n\\\\n\\")))
      assert.same("\\\\\n\\\\\n\\", luarpc.decode("string", luarpc.encode("string", "\\\\\n\\\\\n\\")))
      assert.same("\\\n\\\n\\\\", luarpc.decode("string", luarpc.encode("string", "\\\n\\\n\\\\")))
      assert.same("\\\n\\\\n\\\\", luarpc.decode("string", luarpc.encode("string", "\\\n\\\\n\\\\")))
      assert.same("\\\\n\\\\n\\\\", luarpc.decode("string", luarpc.encode("string", "\\\\n\\\\n\\\\")))
      assert.same("\\\\\n\\\\n\\\\", luarpc.decode("string", luarpc.encode("string", "\\\\\n\\\\n\\\\")))
      assert.same("\\\\\n\\\\\n\\\\", luarpc.decode("string", luarpc.encode("string", "\\\\\n\\\\\n\\\\")))
      assert.same("\\\n\\n\\", luarpc.decode("string", luarpc.encode("string", "\\\n\\n\\")))
      assert.same("\\\n\\\n\\", luarpc.decode("string", luarpc.encode("string", "\\\n\\\n\\")))
      assert.same("n\\n", luarpc.decode("string", luarpc.encode("string", "n\\n")))
      assert.same("n\\\n", luarpc.decode("string", luarpc.encode("string", "n\\\n")))
      assert.same("n\\\\n", luarpc.decode("string", luarpc.encode("string", "n\\\\n")))
      assert.same(3.1415, luarpc.decode("double", luarpc.encode("double", 3.1415)))
      assert.same(1, luarpc.decode("double", luarpc.encode("double", 1)))
      assert.same(123, luarpc.decode("double", luarpc.encode("double", 123)))
    end)
  end)
end)
